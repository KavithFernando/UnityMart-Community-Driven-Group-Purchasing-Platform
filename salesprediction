from flask import Flask, request, jsonify
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import MinMaxScaler
import pandas as pd
import numpy as np

app = Flask(__name__)


store_sales = pd.read_csv("C:\\Users\\USER\\Downloads\\train.csv")


store_sales['date'] = pd.to_datetime(store_sales['date'])
store_sales['date'] = store_sales['date'].dt.to_period("M")
monthly_sales = store_sales.groupby('date').sum().reset_index()
monthly_sales['sales_diff'] = monthly_sales['sales'].diff()
monthly_sales = monthly_sales.dropna()


supervised_data = monthly_sales.drop(['date','sales'],axis=1)
for i in range (1, 13):
    col_name = 'month' + str(i)
    supervised_data[col_name] = supervised_data['sales_diff'].shift(i)
supervised_data = supervised_data.dropna().reset_index(drop=True)


train_data = supervised_data[:-12]
test_data = supervised_data[-12:]


scaler = MinMaxScaler(feature_range=(-1,1))
scaler.fit(train_data)
train_data_scaled = scaler.transform(train_data)
test_data_scaled = scaler.transform(test_data)


x_train, y_train = train_data_scaled[:, 1:], train_data_scaled[:, 0:1]
x_test, y_test = test_data_scaled[:, 1:], test_data_scaled[:, 0:1]

@app.route('/run-ml', methods=['GET'])
def run_ml_endpoint():
    global x_train, y_train, x_test
    lr_model = LinearRegression()
    lr_model.fit(x_train , y_train)
    lr_pre = lr_model.predict(x_test)
    lr_pre = lr_pre.reshape(-1,1)
    lr_pre_test_set = np.concatenate([lr_pre, x_test],axis=1)
    lr_pre_test_set = scaler.inverse_transform(lr_pre_test_set)
    result_list = []
    for index in range(0, len(lr_pre_test_set)):
        result_list.append(lr_pre_test_set[index][0])
    return jsonify({'predicted_sales': result_list})





if __name__ == '__main__':
    app.run(debug=True)
